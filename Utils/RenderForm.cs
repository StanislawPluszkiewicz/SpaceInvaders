using SpaceInvaders.Components;
using SpaceInvaders.Systems.Render;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;
using static System.Windows.Forms.Timer;

namespace SpaceInvaders.Utils
{
    class RenderForm : Form
    {
        /// <summary>
        /// Instance of the game
        /// </summary>
        public Game game;

        public static Brush BLACK_BRUSH = null;
        public static Font FONT = null;
        public static Pen PEN = null;
        public static BufferedGraphics BUFFERED_GRAPHICS { get; set; }
        public static Rectangle CLIP_RECTANGLE { get; set; }


        public static RenderForm instance = null;
        public static RenderForm CreateRenderForm()
        {
            if (instance == null)
            {
                instance = new RenderForm();
            }
            return instance;
        }

        private RenderForm()
        {
            BLACK_BRUSH = new SolidBrush(Color.Black);
            FONT = new Font("Times New Roman", 24, FontStyle.Bold, GraphicsUnit.Pixel);
            PEN = new Pen(Color.Black);
            BUFFERED_GRAPHICS = null;
            CLIP_RECTANGLE = this.ClientRectangle;
            InitializeComponent();
            game = Game.CreateGame(this.ClientSize);
            watch.Start();
            WorldClock.Start();
        }

        // form event tick 
        private void WorldClock_Tick(object sender, EventArgs e)
        {

            long lastTime = 0;
            // get time with millisecond precision
            long nt = watch.ElapsedMilliseconds;
            // compute ellapsed time since last call to update
            double deltaT = (nt - lastTime);

            for (; deltaT >= maxDelta; deltaT -= maxDelta)
                Engine.instance.Update(maxDelta / 1000.0); // update systems 
            Engine.instance.Render(maxDelta / 1000.0); // render

            // remember the time of this update
            lastTime = nt;

            Invalidate();

        }
        public static void Render(Graphics g, RenderNode target)
        {
            Image image = ((RenderComponent)target.GetComponent(typeof(RenderComponent))).Image;
            Vecteur2D view = ((RenderComponent)target.GetComponent(typeof(RenderComponent))).View;
            g.DrawImage(image, (float)view.x, (float)view.y);
        }


        #region generated by microsoft
        /// <summary>
        /// Variable nécessaire au concepteur.
        /// </summary>
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Timer WorldClock;

        /// <summary>
        /// Nettoyage des ressources utilisées.
        /// </summary>
        /// <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {

            this.components = new System.ComponentModel.Container();
            this.WorldClock = new System.Windows.Forms.Timer(this.components);
            this.SuspendLayout();
            // 
            // WorldClock
            // 
            this.WorldClock.Interval = 30;
            this.WorldClock.Tick += new System.EventHandler(this.WorldClock_Tick);
            // 
            // GameForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(807, 745);
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.MaximizeBox = false;
            this.Name = "GameForm";
            this.Text = "Space Invaders.";

            this.Load += new System.EventHandler(this.GameForm_Load);
            this.Paint += new System.Windows.Forms.PaintEventHandler(this.GameForm_Paint);
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.GameForm_KeyDown);
            this.KeyUp += new System.Windows.Forms.KeyEventHandler(this.GameForm_KeyUp);
            this.ResumeLayout(false);

        }
        /// <summary>
        /// Tick event => update game
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>


        #endregion
        #region time management
        /// <summary>
        /// Game watch
        /// </summary>
        Stopwatch watch = new Stopwatch();

        /// <summary>
        /// Last update time
        /// </summary>

        // lets do 5 ms update to avoid quantum effects
        int maxDelta = 5;
        #endregion
        #region other events
        /// <summary>
        /// Paint event of the form, see msdn for help => paint game with double buffering
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GameForm_Paint(object sender, PaintEventArgs e)
        {
            BufferedGraphics bg = BufferedGraphicsManager.Current.Allocate(e.Graphics, e.ClipRectangle);
            Engine.instance.BufferedGraphics = bg;
        }
        /// <summary>
        /// Key down event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GameForm_KeyDown(object sender, KeyEventArgs e)
        {
            Game.Engine.keyPressed.Add(e.KeyCode);
        }
        /// <summary>
        /// Key up event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GameForm_KeyUp(object sender, KeyEventArgs e)
        {
            Game.Engine.keyPressed.Remove(e.KeyCode);
        }
        private void GameForm_Load(object sender, EventArgs e)
        {

        }
        private void RenderForm_Load(object sender, EventArgs e)
        {

        }


        #endregion

    }
}
